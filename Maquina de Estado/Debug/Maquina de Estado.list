
Maquina de Estado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee8  08003ee8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000018  08003f08  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003f08  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f503  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfb  00000000  00000000  0002f58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  00031390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b42  00000000  00000000  000321e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025db8  00000000  00000000  00032d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010595  00000000  00000000  00058ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee9f8  00000000  00000000  00069077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c8c  00000000  00000000  00157a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e80 	.word	0x08003e80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003e80 	.word	0x08003e80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc74 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f84e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f91c 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ea 	bl	80006ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004d8:	f000 f89a 	bl	8000610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004dc:	4821      	ldr	r0, [pc, #132]	; (8000564 <main+0xa0>)
 80004de:	f002 fb49 	bl	8002b74 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(ESTADO_SIGUIENTE == ESTADO_INIT)
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <main+0xa4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b06      	cmp	r3, #6
 80004e8:	d104      	bne.n	80004f4 <main+0x30>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_INIT();
 80004ea:	f000 fa65 	bl	80009b8 <Func_ESTADO_INIT>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <main+0xa4>)
 80004f2:	6013      	str	r3, [r2, #0]
      }

      if(ESTADO_SIGUIENTE == ESTADO_ABIERTO)
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <main+0xa4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d104      	bne.n	8000506 <main+0x42>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_ABIERTO();
 80004fc:	f000 f994 	bl	8000828 <Func_ESTADO_ABIERTO>
 8000500:	4603      	mov	r3, r0
 8000502:	4a19      	ldr	r2, [pc, #100]	; (8000568 <main+0xa4>)
 8000504:	6013      	str	r3, [r2, #0]
      }
      if(ESTADO_SIGUIENTE == ESTADO_CERRADO)
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0xa4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d104      	bne.n	8000518 <main+0x54>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_CERRADO();
 800050e:	f000 f9b1 	bl	8000874 <Func_ESTADO_CERRADO>
 8000512:	4603      	mov	r3, r0
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <main+0xa4>)
 8000516:	6013      	str	r3, [r2, #0]
      }
      if(ESTADO_SIGUIENTE == ESTADO_ABRIENDO)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <main+0xa4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d104      	bne.n	800052a <main+0x66>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_ABRIENDO();
 8000520:	f000 f9ce 	bl	80008c0 <Func_ESTADO_ABRIENDO>
 8000524:	4603      	mov	r3, r0
 8000526:	4a10      	ldr	r2, [pc, #64]	; (8000568 <main+0xa4>)
 8000528:	6013      	str	r3, [r2, #0]
      }
      if(ESTADO_SIGUIENTE == ESTADO_CERRANDO)
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0xa4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d104      	bne.n	800053c <main+0x78>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_CERRANDO();
 8000532:	f000 f9eb 	bl	800090c <Func_ESTADO_CERRANDO>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <main+0xa4>)
 800053a:	6013      	str	r3, [r2, #0]
      }
      if(ESTADO_SIGUIENTE == ESTADO_INTERMEDIO)
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0xa4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d104      	bne.n	800054e <main+0x8a>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_INTERMEDIO();
 8000544:	f000 fa08 	bl	8000958 <Func_ESTADO_INTERMEDIO>
 8000548:	4603      	mov	r3, r0
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <main+0xa4>)
 800054c:	6013      	str	r3, [r2, #0]
      }

      if(ESTADO_SIGUIENTE == ESTADO_ERROR)
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <main+0xa4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1c5      	bne.n	80004e2 <main+0x1e>
      {
          ESTADO_SIGUIENTE = Func_ESTADO_ERROR();
 8000556:	f000 f95d 	bl	8000814 <Func_ESTADO_ERROR>
 800055a:	4603      	mov	r3, r0
 800055c:	4a02      	ldr	r2, [pc, #8]	; (8000568 <main+0xa4>)
 800055e:	6013      	str	r3, [r2, #0]
      if(ESTADO_SIGUIENTE == ESTADO_INIT)
 8000560:	e7bf      	b.n	80004e2 <main+0x1e>
 8000562:	bf00      	nop
 8000564:	20000034 	.word	0x20000034
 8000568:	20000008 	.word	0x20000008

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fc53 	bl	8003e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f000 ff85 	bl	80014a0 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 faf0 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ba:	230a      	movs	r3, #10
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 ffbc 	bl	800154c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005da:	f000 fad1 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fb84 	bl	8001d04 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 fabd 	bl	8000b80 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3758      	adds	r7, #88	; 0x58
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000638:	224f      	movs	r2, #79	; 0x4f
 800063a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_TIM2_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_TIM2_Init+0x98>)
 8000646:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_TIM2_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000656:	f002 fa35 	bl	8002ac4 <HAL_TIM_Base_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000660:	f000 fa8e 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_TIM2_Init+0x94>)
 8000672:	f002 fbf1 	bl	8002e58 <HAL_TIM_ConfigClockSource>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 fa80 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_TIM2_Init+0x94>)
 800068e:	f002 fe09 	bl	80032a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000698:	f000 fa72 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000034 	.word	0x20000034
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f002 fe7e 	bl	80033f0 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 fa41 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000080 	.word	0x20000080
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_GPIO_Init+0x100>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a39      	ldr	r2, [pc, #228]	; (800080c <MX_GPIO_Init+0x100>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_GPIO_Init+0x100>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_GPIO_Init+0x100>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a33      	ldr	r2, [pc, #204]	; (800080c <MX_GPIO_Init+0x100>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_GPIO_Init+0x100>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_GPIO_Init+0x100>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <MX_GPIO_Init+0x100>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_GPIO_Init+0x100>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_GPIO_Init+0x100>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a27      	ldr	r2, [pc, #156]	; (800080c <MX_GPIO_Init+0x100>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_GPIO_Init+0x100>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Ma_Pin|Mc_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	21e0      	movs	r1, #224	; 0xe0
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 fe63 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <MX_GPIO_Init+0x104>)
 80007a6:	f000 fc93 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sa_Pin Sc_Pin Bc_Pin Ba_Pin */
  GPIO_InitStruct.Pin = Sa_Pin|Sc_Pin|Bc_Pin|Ba_Pin;
 80007aa:	f240 3311 	movw	r3, #785	; 0x311
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 fc85 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c6:	2320      	movs	r3, #32
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fc76 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Ma_Pin Mc_Pin */
  GPIO_InitStruct.Pin = Ma_Pin|Mc_Pin;
 80007e4:	23c0      	movs	r3, #192	; 0xc0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 fc67 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	48000800 	.word	0x48000800

08000814 <Func_ESTADO_ERROR>:

/* USER CODE BEGIN 4 */
int Func_ESTADO_ERROR(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    for(;;)
    {
        inout.Led = TRUE;
 8000818:	4a02      	ldr	r2, [pc, #8]	; (8000824 <Func_ESTADO_ERROR+0x10>)
 800081a:	7813      	ldrb	r3, [r2, #0]
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	7013      	strb	r3, [r2, #0]
 8000822:	e7f9      	b.n	8000818 <Func_ESTADO_ERROR+0x4>
 8000824:	20000108 	.word	0x20000108

08000828 <Func_ESTADO_ABIERTO>:
    }
}
int Func_ESTADO_ABIERTO(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <Func_ESTADO_ABIERTO+0x40>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <Func_ESTADO_ABIERTO+0x44>)
 8000832:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABIERTO;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <Func_ESTADO_ABIERTO+0x40>)
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <Func_ESTADO_ABIERTO+0x48>)
 800083c:	7813      	ldrb	r3, [r2, #0]
 800083e:	f36f 03c3 	bfc	r3, #3, #1
 8000842:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <Func_ESTADO_ABIERTO+0x48>)
 8000846:	7813      	ldrb	r3, [r2, #0]
 8000848:	f36f 0382 	bfc	r3, #2, #1
 800084c:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Bc == TRUE)
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <Func_ESTADO_ABIERTO+0x48>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b01      	cmp	r3, #1
 800085a:	d1f8      	bne.n	800084e <Func_ESTADO_ABIERTO+0x26>
        {
            return ESTADO_CERRANDO;
 800085c:	2304      	movs	r3, #4
        }
    }
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	20000004 	.word	0x20000004
 800086c:	20000000 	.word	0x20000000
 8000870:	20000108 	.word	0x20000108

08000874 <Func_ESTADO_CERRADO>:
int Func_ESTADO_CERRADO(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <Func_ESTADO_CERRADO+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <Func_ESTADO_CERRADO+0x44>)
 800087e:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRADO;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <Func_ESTADO_CERRADO+0x40>)
 8000882:	2202      	movs	r2, #2
 8000884:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 8000886:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <Func_ESTADO_CERRADO+0x48>)
 8000888:	7813      	ldrb	r3, [r2, #0]
 800088a:	f36f 0382 	bfc	r3, #2, #1
 800088e:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <Func_ESTADO_CERRADO+0x48>)
 8000892:	7813      	ldrb	r3, [r2, #0]
 8000894:	f36f 03c3 	bfc	r3, #3, #1
 8000898:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Ba == TRUE)
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <Func_ESTADO_CERRADO+0x48>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d1f8      	bne.n	800089a <Func_ESTADO_CERRADO+0x26>
        {
            return ESTADO_ABRIENDO;
 80008a8:	2303      	movs	r3, #3
        }
    }

}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000004 	.word	0x20000004
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000108 	.word	0x20000108

080008c0 <Func_ESTADO_ABRIENDO>:
int Func_ESTADO_ABRIENDO(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <Func_ESTADO_ABRIENDO+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <Func_ESTADO_ABRIENDO+0x44>)
 80008ca:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_ABRIENDO;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <Func_ESTADO_ABRIENDO+0x40>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	601a      	str	r2, [r3, #0]
    inout.Mc = FALSE;
 80008d2:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <Func_ESTADO_ABRIENDO+0x48>)
 80008d4:	7813      	ldrb	r3, [r2, #0]
 80008d6:	f36f 0382 	bfc	r3, #2, #1
 80008da:	7013      	strb	r3, [r2, #0]
    inout.Ma = TRUE;
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <Func_ESTADO_ABRIENDO+0x48>)
 80008de:	7813      	ldrb	r3, [r2, #0]
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Sa == TRUE)
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <Func_ESTADO_ABRIENDO+0x48>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d1f8      	bne.n	80008e6 <Func_ESTADO_ABRIENDO+0x26>
        {
            return ESTADO_ABIERTO;
 80008f4:	2301      	movs	r3, #1
        }
    }
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	20000004 	.word	0x20000004
 8000904:	20000000 	.word	0x20000000
 8000908:	20000108 	.word	0x20000108

0800090c <Func_ESTADO_CERRANDO>:
int Func_ESTADO_CERRANDO(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <Func_ESTADO_CERRANDO+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <Func_ESTADO_CERRANDO+0x44>)
 8000916:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_CERRANDO;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <Func_ESTADO_CERRANDO+0x40>)
 800091a:	2204      	movs	r2, #4
 800091c:	601a      	str	r2, [r3, #0]
    inout.Mc = TRUE;
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <Func_ESTADO_CERRANDO+0x48>)
 8000920:	7813      	ldrb	r3, [r2, #0]
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	7013      	strb	r3, [r2, #0]
    inout.Ma = FALSE;
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <Func_ESTADO_CERRANDO+0x48>)
 800092a:	7813      	ldrb	r3, [r2, #0]
 800092c:	f36f 03c3 	bfc	r3, #3, #1
 8000930:	7013      	strb	r3, [r2, #0]

    for(;;)
    {
        if(inout.Sc == TRUE)
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <Func_ESTADO_CERRANDO+0x48>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d1f8      	bne.n	8000932 <Func_ESTADO_CERRANDO+0x26>
        {
            return ESTADO_CERRADO;
 8000940:	2302      	movs	r3, #2
        }
    }
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20000004 	.word	0x20000004
 8000950:	20000000 	.word	0x20000000
 8000954:	20000108 	.word	0x20000108

08000958 <Func_ESTADO_INTERMEDIO>:
int Func_ESTADO_INTERMEDIO(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <Func_ESTADO_INTERMEDIO+0x54>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <Func_ESTADO_INTERMEDIO+0x58>)
 8000962:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INTERMEDIO;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <Func_ESTADO_INTERMEDIO+0x54>)
 8000966:	2205      	movs	r2, #5
 8000968:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <Func_ESTADO_INTERMEDIO+0x5c>)
 800096c:	7813      	ldrb	r3, [r2, #0]
 800096e:	f36f 03c3 	bfc	r3, #3, #1
 8000972:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000976:	7813      	ldrb	r3, [r2, #0]
 8000978:	f36f 0382 	bfc	r3, #2, #1
 800097c:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if(inout.Ba == TRUE)
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <Func_ESTADO_INTERMEDIO+0x38>
        {
            return ESTADO_ABRIENDO;
 800098c:	2303      	movs	r3, #3
 800098e:	e007      	b.n	80009a0 <Func_ESTADO_INTERMEDIO+0x48>
        }
        if(inout.Bc == TRUE)
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <Func_ESTADO_INTERMEDIO+0x5c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1ef      	bne.n	800097e <Func_ESTADO_INTERMEDIO+0x26>
        {
            return ESTADO_CERRANDO;
 800099e:	2304      	movs	r3, #4
        }
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000108 	.word	0x20000108

080009b8 <Func_ESTADO_INIT>:
int Func_ESTADO_INIT(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
    ESTADO_ANTERIOR = ESTADO_ACTUAL;
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <Func_ESTADO_INIT+0x94>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <Func_ESTADO_INIT+0x98>)
 80009c2:	6013      	str	r3, [r2, #0]
    ESTADO_ACTUAL = ESTADO_INIT;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <Func_ESTADO_INIT+0x94>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	601a      	str	r2, [r3, #0]
    inout.Ma = FALSE;
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 80009cc:	7813      	ldrb	r3, [r2, #0]
 80009ce:	f36f 03c3 	bfc	r3, #3, #1
 80009d2:	7013      	strb	r3, [r2, #0]
    inout.Mc = FALSE;
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 80009d6:	7813      	ldrb	r3, [r2, #0]
 80009d8:	f36f 0382 	bfc	r3, #2, #1
 80009dc:	7013      	strb	r3, [r2, #0]
    for(;;)
    {
        if((inout.Sa == TRUE) && (inout.Sc == TRUE))
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d108      	bne.n	80009fe <Func_ESTADO_INIT+0x46>
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d101      	bne.n	80009fe <Func_ESTADO_INIT+0x46>
        {
            return ESTADO_ERROR;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e020      	b.n	8000a40 <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sa == TRUE)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d101      	bne.n	8000a10 <Func_ESTADO_INIT+0x58>
        {
            return ESTADO_ABIERTO;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e017      	b.n	8000a40 <Func_ESTADO_INIT+0x88>
        }

        if(inout.Sc == TRUE)
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d101      	bne.n	8000a22 <Func_ESTADO_INIT+0x6a>
        {
            return ESTADO_CERRADO;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e00e      	b.n	8000a40 <Func_ESTADO_INIT+0x88>
        }

        if((inout.Sa == FALSE) && (inout.Sc == FALSE))
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1d6      	bne.n	80009de <Func_ESTADO_INIT+0x26>
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <Func_ESTADO_INIT+0x9c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1cf      	bne.n	80009de <Func_ESTADO_INIT+0x26>
        {
            return ESTADO_INTERMEDIO;
 8000a3e:	2305      	movs	r3, #5
        }
    }
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000108 	.word	0x20000108

08000a58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	    if(HAL_GPIO_ReadPin(PUERTO, PIN_Ba) == GPIO_PIN_SET)
 8000a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fcdc 	bl	8001424 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d105      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x26>
	    {
	   	    inout.Ba = TRUE;
 8000a72:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a74:	7813      	ldrb	r3, [r2, #0]
 8000a76:	f043 0320 	orr.w	r3, r3, #32
 8000a7a:	7013      	strb	r3, [r2, #0]
 8000a7c:	e004      	b.n	8000a88 <HAL_TIM_PeriodElapsedCallback+0x30>
	   	}
	   	else
	   	{
	   	    inout.Ba = FALSE;
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a80:	7813      	ldrb	r3, [r2, #0]
 8000a82:	f36f 1345 	bfc	r3, #5, #1
 8000a86:	7013      	strb	r3, [r2, #0]
	   	}

	    if(HAL_GPIO_ReadPin(PUERTO, PIN_Bc) == GPIO_PIN_SET)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fcc8 	bl	8001424 <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d105      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	    {
	        inout.Bc = TRUE;
 8000a9a:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000a9c:	7813      	ldrb	r3, [r2, #0]
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	7013      	strb	r3, [r2, #0]
 8000aa4:	e004      	b.n	8000ab0 <HAL_TIM_PeriodElapsedCallback+0x58>
	    }
	    else
	    {
	        inout.Bc = FALSE;
 8000aa6:	4a35      	ldr	r2, [pc, #212]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000aa8:	7813      	ldrb	r3, [r2, #0]
 8000aaa:	f36f 1304 	bfc	r3, #4, #1
 8000aae:	7013      	strb	r3, [r2, #0]
	    }

	    if(HAL_GPIO_ReadPin(PUERTO, PIN_Sc) == GPIO_PIN_SET)
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fcb5 	bl	8001424 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d105      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x74>
	    {
	        inout.Sc = TRUE;
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ac2:	7813      	ldrb	r3, [r2, #0]
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	7013      	strb	r3, [r2, #0]
 8000aca:	e004      	b.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x7e>
	    }
	    else
	    {
	        inout.Sc = FALSE;
 8000acc:	4a2b      	ldr	r2, [pc, #172]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ace:	7813      	ldrb	r3, [r2, #0]
 8000ad0:	f36f 0341 	bfc	r3, #1, #1
 8000ad4:	7013      	strb	r3, [r2, #0]
	    }

	    if(HAL_GPIO_ReadPin(PUERTO, PIN_Sa) == GPIO_PIN_SET)
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 fca2 	bl	8001424 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x9a>
	    {
	        inout.Sa = TRUE;
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ae8:	7813      	ldrb	r3, [r2, #0]
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	7013      	strb	r3, [r2, #0]
 8000af0:	e004      	b.n	8000afc <HAL_TIM_PeriodElapsedCallback+0xa4>
	    }
	    else
	    {
	        inout.Sa = FALSE;
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000af4:	7813      	ldrb	r3, [r2, #0]
 8000af6:	f36f 0300 	bfc	r3, #0, #1
 8000afa:	7013      	strb	r3, [r2, #0]
	    }

	    if(inout.Ma == TRUE)
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d106      	bne.n	8000b18 <HAL_TIM_PeriodElapsedCallback+0xc0>
	    {
	        HAL_GPIO_WritePin(PUERTO, PIN_Ma,1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fc9f 	bl	8001454 <HAL_GPIO_WritePin>
 8000b16:	e005      	b.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0xcc>
	    }
	    else
	    {
	        HAL_GPIO_WritePin(PUERTO, PIN_Ma,0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fc98 	bl	8001454 <HAL_GPIO_WritePin>
	    }

	    if(inout.Mc == TRUE)
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xe8>
	    {
	        HAL_GPIO_WritePin(PUERTO, PIN_Mc,1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f000 fc8b 	bl	8001454 <HAL_GPIO_WritePin>
 8000b3e:	e005      	b.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0xf4>
	    }
	    else
	    {
	        HAL_GPIO_WritePin(PUERTO, PIN_Mc,0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fc84 	bl	8001454 <HAL_GPIO_WritePin>
	    }

	    if(inout.Led == TRUE)
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d106      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x110>
	    {
	    	 HAL_GPIO_WritePin(PUERTO, PIN_Led,1);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fc77 	bl	8001454 <HAL_GPIO_WritePin>
	    }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000b66:	e005      	b.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x11c>
	    	 HAL_GPIO_WritePin(PUERTO, PIN_Led,0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 fc70 	bl	8001454 <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000108 	.word	0x20000108

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_TIM_Base_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201c      	movs	r0, #28
 8000c04:	f000 fa2d 	bl	8001062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c08:	201c      	movs	r0, #28
 8000c0a:	f000 fa46 	bl	800109a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0ac      	sub	sp, #176	; 0xb0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2288      	movs	r2, #136	; 0x88
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f8f2 	bl	8003e26 <memset>
  if(huart->Instance==USART2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <HAL_UART_MspInit+0xb0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d13b      	bne.n	8000cc4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fa77 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c64:	f7ff ff8c 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fa06 	bl	80010d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	37b0      	adds	r7, #176	; 0xb0
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f8a4 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM2_IRQHandler+0x10>)
 8000d2e:	f001 ff91 	bl	8002c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000034 	.word	0x20000034

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f003 f853 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fb97 	bl	80004c4 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000da4:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 8000da8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dac:	20000110 	.word	0x20000110

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_Init+0x3c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_Init+0x3c>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f000 f93e 	bl	800104c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f80f 	bl	8000df4 <HAL_InitTick>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	e001      	b.n	8000de6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de2:	f7ff fed3 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d023      	beq.n	8000e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_InitTick+0x70>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f949 	bl	80010b6 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10f      	bne.n	8000e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d809      	bhi.n	8000e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f913 	bl	8001062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_InitTick+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e007      	b.n	8000e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e004      	b.n	8000e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e001      	b.n	8000e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000014 	.word	0x20000014
 8000e64:	2000000c 	.word	0x2000000c
 8000e68:	20000010 	.word	0x20000010

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000014 	.word	0x20000014
 8000e90:	2000010c 	.word	0x2000010c

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000010c 	.word	0x2000010c

08000eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	db0b      	blt.n	8000f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 021f 	and.w	r2, r3, #31
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <__NVIC_EnableIRQ+0x38>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	2001      	movs	r0, #1
 8000f32:	fa00 f202 	lsl.w	r2, r0, r2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001018:	d301      	bcc.n	800101e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101a:	2301      	movs	r3, #1
 800101c:	e00f      	b.n	800103e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <SysTick_Config+0x40>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001026:	210f      	movs	r1, #15
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f7ff ff8e 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SysTick_Config+0x40>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <SysTick_Config+0x40>)
 8001038:	2207      	movs	r2, #7
 800103a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010

0800104c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff29 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001074:	f7ff ff3e 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 8001078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ff8e 	bl	8000fa0 <NVIC_EncodePriority>
 8001084:	4602      	mov	r2, r0
 8001086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff5d 	bl	8000f4c <__NVIC_SetPriority>
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff31 	bl	8000f10 <__NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffa2 	bl	8001008 <SysTick_Config>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e17f      	b.n	80013e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8171 	beq.w	80013da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x40>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 0201 	and.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b03      	cmp	r3, #3
 800117c:	d118      	bne.n	80011b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	08db      	lsrs	r3, r3, #3
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80ac 	beq.w	80013da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6613      	str	r3, [r2, #96]	; 0x60
 800128e:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_GPIO_Init+0x330>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129a:	4a5a      	ldr	r2, [pc, #360]	; (8001404 <HAL_GPIO_Init+0x334>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x242>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x338>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x23e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x33c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x23a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x340>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x236>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	; (8001414 <HAL_GPIO_Init+0x344>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x232>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	; (8001418 <HAL_GPIO_Init+0x348>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x22e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4a      	ldr	r2, [pc, #296]	; (800141c <HAL_GPIO_Init+0x34c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x22a>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00c      	b.n	8001314 <HAL_GPIO_Init+0x244>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00a      	b.n	8001314 <HAL_GPIO_Init+0x244>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x244>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x244>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x244>
 8001312:	2300      	movs	r3, #0
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001324:	4937      	ldr	r1, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_GPIO_Init+0x350>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001356:	4a32      	ldr	r2, [pc, #200]	; (8001420 <HAL_GPIO_Init+0x350>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <HAL_GPIO_Init+0x350>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_GPIO_Init+0x350>)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_GPIO_Init+0x350>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_GPIO_Init+0x350>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_GPIO_Init+0x350>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <HAL_GPIO_Init+0x350>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae78 	bne.w	80010e0 <HAL_GPIO_Init+0x10>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000800 	.word	0x48000800
 8001410:	48000c00 	.word	0x48000c00
 8001414:	48001000 	.word	0x48001000
 8001418:	48001400 	.word	0x48001400
 800141c:	48001800 	.word	0x48001800
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001470:	e002      	b.n	8001478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_PWREx_GetVoltageRange+0x18>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ae:	d130      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014bc:	d038      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2232      	movs	r2, #50	; 0x32
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e4:	e002      	b.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f8:	d102      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f2      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150c:	d110      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e00f      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151e:	d007      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40007000 	.word	0x40007000
 8001544:	2000000c 	.word	0x2000000c
 8001548:	431bde83 	.word	0x431bde83

0800154c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e3ca      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155e:	4b97      	ldr	r3, [pc, #604]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001568:	4b94      	ldr	r3, [pc, #592]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80e4 	beq.w	8001748 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_RCC_OscConfig+0x4a>
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	f040 808b 	bne.w	80016a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 8087 	bne.w	80016a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x62>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e3a2      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	4b82      	ldr	r3, [pc, #520]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_RCC_OscConfig+0x7c>
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c6:	e005      	b.n	80015d4 <HAL_RCC_OscConfig+0x88>
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d223      	bcs.n	8001620 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fd55 	bl	800208c <RCC_SetFlashLatencyFromMSIRange>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e383      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	4b73      	ldr	r3, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a72      	ldr	r2, [pc, #456]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b70      	ldr	r3, [pc, #448]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	496d      	ldr	r1, [pc, #436]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4968      	ldr	r1, [pc, #416]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
 800161e:	e025      	b.n	800166c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4960      	ldr	r1, [pc, #384]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	495b      	ldr	r1, [pc, #364]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fd15 	bl	800208c <RCC_SetFlashLatencyFromMSIRange>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e343      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800166c:	f000 fc4a 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4950      	ldr	r1, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x274>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_RCC_OscConfig+0x278>)
 800168a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fbaf 	bl	8000df4 <HAL_InitTick>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d052      	beq.n	8001746 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	e327      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d032      	beq.n	8001712 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ac:	4b43      	ldr	r3, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a42      	ldr	r2, [pc, #264]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbec 	bl	8000e94 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbe8 	bl	8000e94 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e310      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4931      	ldr	r1, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	492c      	ldr	r1, [pc, #176]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e01a      	b.n	8001748 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff fbb9 	bl	8000e94 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fbb5 	bl	8000e94 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2dd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x1da>
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001746:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d074      	beq.n	800183e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x21a>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d10e      	bne.n	800177e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d10b      	bne.n	800177e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d064      	beq.n	800183c <HAL_RCC_OscConfig+0x2f0>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d160      	bne.n	800183c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e2ba      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x24a>
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e026      	b.n	80017e4 <HAL_RCC_OscConfig+0x298>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179e:	d115      	bne.n	80017cc <HAL_RCC_OscConfig+0x280>
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a02      	ldr	r2, [pc, #8]	; (80017bc <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x298>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08003e98 	.word	0x08003e98
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	20000010 	.word	0x20000010
 80017cc:	4ba0      	ldr	r3, [pc, #640]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a9f      	ldr	r2, [pc, #636]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b9d      	ldr	r3, [pc, #628]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a9c      	ldr	r2, [pc, #624]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb52 	bl	8000e94 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb4e 	bl	8000e94 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e276      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	4b92      	ldr	r3, [pc, #584]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2a8>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb3e 	bl	8000e94 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb3a 	bl	8000e94 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e262      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x2d0>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d060      	beq.n	800190c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x310>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d119      	bne.n	800188a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d116      	bne.n	800188a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185c:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x328>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e23f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	4973      	ldr	r1, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001888:	e040      	b.n	800190c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d023      	beq.n	80018da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001892:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff faf9 	bl	8000e94 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff faf5 	bl	8000e94 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e21d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b62      	ldr	r3, [pc, #392]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	495f      	ldr	r1, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	e018      	b.n	800190c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5c      	ldr	r2, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fad5 	bl	8000e94 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fad1 	bl	8000e94 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1f9      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d03c      	beq.n	8001992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01c      	beq.n	800195a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff fab0 	bl	8000e94 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff faac 	bl	8000e94 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ef      	beq.n	8001938 <HAL_RCC_OscConfig+0x3ec>
 8001958:	e01b      	b.n	8001992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fa93 	bl	8000e94 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fa8f 	bl	8000e94 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1b7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ef      	bne.n	8001972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a6 	beq.w	8001aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d118      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fa56 	bl	8000e94 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff fa52 	bl	8000e94 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e17a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x508>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4d8>
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a22:	e029      	b.n	8001a78 <HAL_RCC_OscConfig+0x52c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d115      	bne.n	8001a58 <HAL_RCC_OscConfig+0x50c>
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x52c>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	4b9c      	ldr	r3, [pc, #624]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a9b      	ldr	r2, [pc, #620]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a68:	4b98      	ldr	r3, [pc, #608]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	4a97      	ldr	r2, [pc, #604]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d016      	beq.n	8001aae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa08 	bl	8000e94 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fa04 	bl	8000e94 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e12a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ed      	beq.n	8001a88 <HAL_RCC_OscConfig+0x53c>
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f9f1 	bl	8000e94 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f9ed 	bl	8000e94 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e113      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a79      	ldr	r2, [pc, #484]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80fe 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	f040 80d0 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d130      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d127      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d11f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b40:	2a07      	cmp	r2, #7
 8001b42:	bf14      	ite	ne
 8001b44:	2201      	movne	r2, #1
 8001b46:	2200      	moveq	r2, #0
 8001b48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d113      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d06e      	beq.n	8001c54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d069      	beq.n	8001c50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0ad      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba4:	f7ff f976 	bl	8000e94 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f972 	bl	8000e94 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e09a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x784>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001be4:	0212      	lsls	r2, r2, #8
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0552      	lsls	r2, r2, #21
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bf8:	0852      	lsrs	r2, r2, #1
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	0652      	lsls	r2, r2, #25
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c04:	0912      	lsrs	r2, r2, #4
 8001c06:	0452      	lsls	r2, r2, #17
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	4930      	ldr	r1, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a2a      	ldr	r2, [pc, #168]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c28:	f7ff f934 	bl	8000e94 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f930 	bl	8000e94 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e058      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4e:	e050      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d148      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c78:	f7ff f90c 	bl	8000e94 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f908 	bl	8000e94 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e030      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x734>
 8001c9e:	e028      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d023      	beq.n	8001cee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f8ef 	bl	8000e94 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	e00c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff f8eb 	bl	8000e94 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d905      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4905      	ldr	r1, [pc, #20]	; (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x7b4>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e001      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	feeefffc 	.word	0xfeeefffc

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0e7      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b75      	ldr	r3, [pc, #468]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4970      	ldr	r1, [pc, #448]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b6e      	ldr	r3, [pc, #440]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cf      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d908      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4960      	ldr	r1, [pc, #384]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04c      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0a6      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08e      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e086      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4943      	ldr	r1, [pc, #268]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff f852 	bl	8000e94 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7ff f84e 	bl	8000e94 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e06e      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d208      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	492b      	ldr	r1, [pc, #172]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d210      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0207 	bic.w	r2, r3, #7
 8001e60:	4923      	ldr	r1, [pc, #140]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e036      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	4918      	ldr	r1, [pc, #96]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4910      	ldr	r1, [pc, #64]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb8:	f000 f824 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	490b      	ldr	r1, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1fc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ff89 	bl	8000df4 <HAL_InitTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08003e98 	.word	0x08003e98
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000010 	.word	0x20000010

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11e      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e005      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e004      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d134      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0xa6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fa8:	e005      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fac:	617b      	str	r3, [r7, #20]
      break;
 8001fae:	e005      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb2:	617b      	str	r3, [r7, #20]
      break;
 8001fb4:	e002      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	617b      	str	r3, [r7, #20]
      break;
 8001fba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	0e5b      	lsrs	r3, r3, #25
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	3301      	adds	r3, #1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	08003eb0 	.word	0x08003eb0
 8002014:	00f42400 	.word	0x00f42400
 8002018:	007a1200 	.word	0x007a1200

0800201c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_RCC_GetHCLKFreq+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002038:	f7ff fff0 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4904      	ldr	r1, [pc, #16]	; (800205c <HAL_RCC_GetPCLK1Freq+0x28>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	08003ea8 	.word	0x08003ea8

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002064:	f7ff ffda 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4904      	ldr	r1, [pc, #16]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08003ea8 	.word	0x08003ea8

0800208c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002098:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff f9ee 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 80020a8:	6178      	str	r0, [r7, #20]
 80020aa:	e014      	b.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	; 0x58
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c4:	f7ff f9de 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 80020c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020dc:	d10b      	bne.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b80      	cmp	r3, #128	; 0x80
 80020e2:	d919      	bls.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2ba0      	cmp	r3, #160	; 0xa0
 80020e8:	d902      	bls.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ea:	2302      	movs	r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e013      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e010      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d902      	bls.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020fc:	2303      	movs	r3, #3
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e00a      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d102      	bne.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002108:	2302      	movs	r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e004      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b70      	cmp	r3, #112	; 0x70
 8002112:	d101      	bne.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4909      	ldr	r1, [pc, #36]	; (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002154:	2300      	movs	r3, #0
 8002156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002158:	2300      	movs	r3, #0
 800215a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	d041      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800216c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002170:	d02a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002172:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002176:	d824      	bhi.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217c:	d008      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800217e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002182:	d81e      	bhi.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218c:	d010      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800218e:	e018      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002190:	4b86      	ldr	r3, [pc, #536]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a85      	ldr	r2, [pc, #532]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800219c:	e015      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fabb 	bl	8002720 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ae:	e00c      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3320      	adds	r3, #32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fba6 	bl	8002908 <RCCEx_PLLSAI2_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c0:	e003      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	74fb      	strb	r3, [r7, #19]
      break;
 80021c6:	e000      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021de:	4973      	ldr	r1, [pc, #460]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d041      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002200:	d02a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002202:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002206:	d824      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220c:	d008      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002212:	d81e      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221e:	e018      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002220:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a61      	ldr	r2, [pc, #388]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800222c:	e015      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa73 	bl	8002720 <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223e:	e00c      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3320      	adds	r3, #32
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fb5e 	bl	8002908 <RCCEx_PLLSAI2_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	74fb      	strb	r3, [r7, #19]
      break;
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002260:	4b52      	ldr	r3, [pc, #328]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800226e:	494f      	ldr	r1, [pc, #316]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002276:	e001      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a0 	beq.w	80023ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a40      	ldr	r2, [pc, #256]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fde2 	bl	8000e94 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022d2:	e009      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fdde 	bl	8000e94 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d902      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	74fb      	strb	r3, [r7, #19]
        break;
 80022e6:	e005      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d15c      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002304:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01f      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d019      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fd9d 	bl	8000e94 <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235c:	e00b      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe fd99 	bl	8000e94 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d902      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	74fb      	strb	r3, [r7, #19]
            break;
 8002374:	e006      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ec      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239a:	4904      	ldr	r1, [pc, #16]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023a2:	e009      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
 80023a8:	e006      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b8:	7c7b      	ldrb	r3, [r7, #17]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b9e      	ldr	r3, [pc, #632]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	4a9d      	ldr	r2, [pc, #628]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d6:	4b98      	ldr	r3, [pc, #608]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f023 0203 	bic.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	4994      	ldr	r1, [pc, #592]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b8f      	ldr	r3, [pc, #572]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 020c 	bic.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	498c      	ldr	r1, [pc, #560]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800241a:	4b87      	ldr	r3, [pc, #540]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4983      	ldr	r1, [pc, #524]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	497b      	ldr	r1, [pc, #492]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	4972      	ldr	r1, [pc, #456]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002480:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	496a      	ldr	r1, [pc, #424]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	4961      	ldr	r1, [pc, #388]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c4:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	4959      	ldr	r1, [pc, #356]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e6:	4b54      	ldr	r3, [pc, #336]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f4:	4950      	ldr	r1, [pc, #320]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	4948      	ldr	r1, [pc, #288]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	493f      	ldr	r1, [pc, #252]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d028      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255a:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256a:	d106      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002576:	60d3      	str	r3, [r2, #12]
 8002578:	e011      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002582:	d10c      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2101      	movs	r1, #1
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f8c8 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	491f      	ldr	r1, [pc, #124]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c8:	d106      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d4:	60d3      	str	r3, [r2, #12]
 80025d6:	e011      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f899 	bl	8002720 <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02b      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002626:	d109      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a02      	ldr	r2, [pc, #8]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002632:	60d3      	str	r3, [r2, #12]
 8002634:	e014      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002644:	d10c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f867 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02f      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267a:	4928      	ldr	r1, [pc, #160]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268a:	d10d      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f844 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d014      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	74bb      	strb	r3, [r7, #18]
 80026a6:	e011      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3320      	adds	r3, #32
 80026b6:	2102      	movs	r1, #2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f925 	bl	8002908 <RCCEx_PLLSAI2_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e6:	490d      	ldr	r1, [pc, #52]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270a:	4904      	ldr	r1, [pc, #16]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002712:	7cbb      	ldrb	r3, [r7, #18]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272e:	4b75      	ldr	r3, [pc, #468]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
       ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002752:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
       ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d047      	beq.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e044      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d018      	beq.n	80027a6 <RCCEx_PLLSAI1_Config+0x86>
 8002774:	2b03      	cmp	r3, #3
 8002776:	d825      	bhi.n	80027c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002778:	2b01      	cmp	r3, #1
 800277a:	d002      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x62>
 800277c:	2b02      	cmp	r3, #2
 800277e:	d009      	beq.n	8002794 <RCCEx_PLLSAI1_Config+0x74>
 8002780:	e020      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002782:	4b60      	ldr	r3, [pc, #384]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11d      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e01a      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002794:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e013      	b.n	80027ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027c2:	e006      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e004      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e002      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027da:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	430b      	orrs	r3, r1
 80027f0:	4944      	ldr	r1, [pc, #272]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d17d      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027fc:	4b41      	ldr	r3, [pc, #260]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a40      	ldr	r2, [pc, #256]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fb44 	bl	8000e94 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800280e:	e009      	b.n	8002824 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002810:	f7fe fb40 	bl	8000e94 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	73fb      	strb	r3, [r7, #15]
        break;
 8002822:	e005      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002824:	4b37      	ldr	r3, [pc, #220]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d160      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	0912      	lsrs	r2, r2, #4
 8002854:	0452      	lsls	r2, r2, #17
 8002856:	430a      	orrs	r2, r1
 8002858:	492a      	ldr	r1, [pc, #168]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]
 800285e:	e027      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d112      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800286e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	0211      	lsls	r1, r2, #8
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6912      	ldr	r2, [r2, #16]
 800287c:	0852      	lsrs	r2, r2, #1
 800287e:	3a01      	subs	r2, #1
 8002880:	0552      	lsls	r2, r2, #21
 8002882:	430a      	orrs	r2, r1
 8002884:	491f      	ldr	r1, [pc, #124]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	610b      	str	r3, [r1, #16]
 800288a:	e011      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	0211      	lsls	r1, r2, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6952      	ldr	r2, [r2, #20]
 80028a2:	0852      	lsrs	r2, r2, #1
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0652      	lsls	r2, r2, #25
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4916      	ldr	r1, [pc, #88]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe faea 	bl	8000e94 <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028c2:	e009      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c4:	f7fe fae6 	bl	8000e94 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
          break;
 80028d6:	e005      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	4904      	ldr	r1, [pc, #16]	; (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000

08002908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002916:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0203 	and.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d10d      	bne.n	800294e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
       ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800293a:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
       ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d047      	beq.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e044      	b.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d018      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x86>
 800295c:	2b03      	cmp	r3, #3
 800295e:	d825      	bhi.n	80029ac <RCCEx_PLLSAI2_Config+0xa4>
 8002960:	2b01      	cmp	r3, #1
 8002962:	d002      	beq.n	800296a <RCCEx_PLLSAI2_Config+0x62>
 8002964:	2b02      	cmp	r3, #2
 8002966:	d009      	beq.n	800297c <RCCEx_PLLSAI2_Config+0x74>
 8002968:	e020      	b.n	80029ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800296a:	4b55      	ldr	r3, [pc, #340]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11d      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297a:	e01a      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298c:	e013      	b.n	80029b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800299a:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029aa:	e006      	b.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e004      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	430b      	orrs	r3, r1
 80029d8:	4939      	ldr	r1, [pc, #228]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d167      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe fa50 	bl	8000e94 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f6:	e009      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f8:	f7fe fa4c 	bl	8000e94 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	73fb      	strb	r3, [r7, #15]
        break;
 8002a0a:	e005      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ef      	bne.n	80029f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d14a      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	0912      	lsrs	r2, r2, #4
 8002a3c:	0452      	lsls	r2, r2, #17
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	491f      	ldr	r1, [pc, #124]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	614b      	str	r3, [r1, #20]
 8002a46:	e011      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6912      	ldr	r2, [r2, #16]
 8002a5e:	0852      	lsrs	r2, r2, #1
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0652      	lsls	r2, r2, #25
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fa0c 	bl	8000e94 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a7e:	e009      	b.n	8002a94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a80:	f7fe fa08 	bl	8000e94 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	73fb      	strb	r3, [r7, #15]
          break;
 8002a92:	e005      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e049      	b.n	8002b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe f872 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 fa9a 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04f      	b.n	8002c2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d018      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_Base_Start_IT+0x76>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d115      	bne.n	8002c16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d015      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0xb4>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d011      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	e008      	b.n	8002c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e000      	b.n	8002c2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	00010007 	.word	0x00010007

08002c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d020      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d01b      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0202 	mvn.w	r2, #2
 8002c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f9ad 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f99f 	bl	8002fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9b0 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d020      	beq.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0204 	mvn.w	r2, #4
 8002cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f987 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f979 	bl	8002fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f98a 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0208 	mvn.w	r2, #8
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f961 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f953 	bl	8002fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f964 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2208      	movs	r2, #8
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f93b 	bl	8002ffe <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f92d 	bl	8002fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f93e 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fe4c 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 faf2 	bl	80033c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 faea 	bl	80033dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8fd 	bl	8003026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0220 	mvn.w	r2, #32
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fab2 	bl	80033b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_ConfigClockSource+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0b6      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x18a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb0:	d03e      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0xd8>
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	f200 8087 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	f000 8086 	beq.w	8002fce <HAL_TIM_ConfigClockSource+0x176>
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec6:	d87f      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d01a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xaa>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d87b      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d050      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x11e>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d877      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d03c      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0xfe>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d873      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d058      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x13e>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d86f      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d064      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d86b      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d060      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d867      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05c      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d05a      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002f00:	e062      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	f000 f9a7 	bl	8003264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	609a      	str	r2, [r3, #8]
      break;
 8002f2e:	e04f      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	f000 f990 	bl	8003264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f52:	609a      	str	r2, [r3, #8]
      break;
 8002f54:	e03c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f904 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2150      	movs	r1, #80	; 0x50
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f95d 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002f74:	e02c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f923 	bl	80031ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2160      	movs	r1, #96	; 0x60
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f94d 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002f94:	e01c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 f8e4 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2140      	movs	r1, #64	; 0x40
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f93d 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f000 f934 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002fc6:	e003      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e000      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a40      	ldr	r2, [pc, #256]	; (8003150 <TIM_Base_SetConfig+0x114>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d00f      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3d      	ldr	r2, [pc, #244]	; (8003154 <TIM_Base_SetConfig+0x118>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <TIM_Base_SetConfig+0x11c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3b      	ldr	r2, [pc, #236]	; (800315c <TIM_Base_SetConfig+0x120>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3a      	ldr	r2, [pc, #232]	; (8003160 <TIM_Base_SetConfig+0x124>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <TIM_Base_SetConfig+0x114>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01f      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d01b      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <TIM_Base_SetConfig+0x118>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a2b      	ldr	r2, [pc, #172]	; (8003158 <TIM_Base_SetConfig+0x11c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2a      	ldr	r2, [pc, #168]	; (800315c <TIM_Base_SetConfig+0x120>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a29      	ldr	r2, [pc, #164]	; (8003160 <TIM_Base_SetConfig+0x124>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a28      	ldr	r2, [pc, #160]	; (8003164 <TIM_Base_SetConfig+0x128>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <TIM_Base_SetConfig+0x12c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0x9a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a26      	ldr	r2, [pc, #152]	; (800316c <TIM_Base_SetConfig+0x130>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <TIM_Base_SetConfig+0x114>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a12      	ldr	r2, [pc, #72]	; (8003160 <TIM_Base_SetConfig+0x124>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0xf8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <TIM_Base_SetConfig+0x128>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0xf8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <TIM_Base_SetConfig+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0xf8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <TIM_Base_SetConfig+0x130>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d103      	bne.n	800313c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	615a      	str	r2, [r3, #20]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f023 0210 	bic.w	r2, r3, #16
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	031b      	lsls	r3, r3, #12
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800320a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	f043 0307 	orr.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	431a      	orrs	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e068      	b.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2e      	ldr	r2, [pc, #184]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003308:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01d      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d018      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10c      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40013400 	.word	0x40013400
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40014000 	.word	0x40014000

080033b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e040      	b.n	8003484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fc02 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fae0 	bl	80039fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f825 	bl	800348c <UART_SetConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e01b      	b.n	8003484 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fb5f 	bl	8003b40 <UART_CheckIdleState>
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4ba4      	ldr	r3, [pc, #656]	; (800374c <UART_SetConfig+0x2c0>)
 80034bc:	4013      	ands	r3, r2
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a99      	ldr	r2, [pc, #612]	; (8003750 <UART_SetConfig+0x2c4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	4313      	orrs	r3, r2
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a90      	ldr	r2, [pc, #576]	; (8003754 <UART_SetConfig+0x2c8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d126      	bne.n	8003564 <UART_SetConfig+0xd8>
 8003516:	4b90      	ldr	r3, [pc, #576]	; (8003758 <UART_SetConfig+0x2cc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b03      	cmp	r3, #3
 8003522:	d81b      	bhi.n	800355c <UART_SetConfig+0xd0>
 8003524:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0xa0>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354d 	.word	0x0800354d
 8003534:	08003545 	.word	0x08003545
 8003538:	08003555 	.word	0x08003555
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e116      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003544:	2302      	movs	r3, #2
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e112      	b.n	8003772 <UART_SetConfig+0x2e6>
 800354c:	2304      	movs	r3, #4
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e10e      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003554:	2308      	movs	r3, #8
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355a:	e10a      	b.n	8003772 <UART_SetConfig+0x2e6>
 800355c:	2310      	movs	r3, #16
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003562:	e106      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7c      	ldr	r2, [pc, #496]	; (800375c <UART_SetConfig+0x2d0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d138      	bne.n	80035e0 <UART_SetConfig+0x154>
 800356e:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <UART_SetConfig+0x2cc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d82d      	bhi.n	80035d8 <UART_SetConfig+0x14c>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0xf8>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080035d9 	.word	0x080035d9
 800358c:	080035d9 	.word	0x080035d9
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035d9 	.word	0x080035d9
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035c1 	.word	0x080035c1
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d1 	.word	0x080035d1
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e0d8      	b.n	8003772 <UART_SetConfig+0x2e6>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e0d4      	b.n	8003772 <UART_SetConfig+0x2e6>
 80035c8:	2304      	movs	r3, #4
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e0d0      	b.n	8003772 <UART_SetConfig+0x2e6>
 80035d0:	2308      	movs	r3, #8
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e0cc      	b.n	8003772 <UART_SetConfig+0x2e6>
 80035d8:	2310      	movs	r3, #16
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e0c8      	b.n	8003772 <UART_SetConfig+0x2e6>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <UART_SetConfig+0x2d4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d125      	bne.n	8003636 <UART_SetConfig+0x1aa>
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <UART_SetConfig+0x2cc>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035f4:	2b30      	cmp	r3, #48	; 0x30
 80035f6:	d016      	beq.n	8003626 <UART_SetConfig+0x19a>
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d818      	bhi.n	800362e <UART_SetConfig+0x1a2>
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d00a      	beq.n	8003616 <UART_SetConfig+0x18a>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d814      	bhi.n	800362e <UART_SetConfig+0x1a2>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <UART_SetConfig+0x182>
 8003608:	2b10      	cmp	r3, #16
 800360a:	d008      	beq.n	800361e <UART_SetConfig+0x192>
 800360c:	e00f      	b.n	800362e <UART_SetConfig+0x1a2>
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003614:	e0ad      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003616:	2302      	movs	r3, #2
 8003618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361c:	e0a9      	b.n	8003772 <UART_SetConfig+0x2e6>
 800361e:	2304      	movs	r3, #4
 8003620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003624:	e0a5      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003626:	2308      	movs	r3, #8
 8003628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362c:	e0a1      	b.n	8003772 <UART_SetConfig+0x2e6>
 800362e:	2310      	movs	r3, #16
 8003630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003634:	e09d      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <UART_SetConfig+0x2d8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <UART_SetConfig+0x200>
 8003640:	4b45      	ldr	r3, [pc, #276]	; (8003758 <UART_SetConfig+0x2cc>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800364a:	2bc0      	cmp	r3, #192	; 0xc0
 800364c:	d016      	beq.n	800367c <UART_SetConfig+0x1f0>
 800364e:	2bc0      	cmp	r3, #192	; 0xc0
 8003650:	d818      	bhi.n	8003684 <UART_SetConfig+0x1f8>
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d00a      	beq.n	800366c <UART_SetConfig+0x1e0>
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d814      	bhi.n	8003684 <UART_SetConfig+0x1f8>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0x1d8>
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d008      	beq.n	8003674 <UART_SetConfig+0x1e8>
 8003662:	e00f      	b.n	8003684 <UART_SetConfig+0x1f8>
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366a:	e082      	b.n	8003772 <UART_SetConfig+0x2e6>
 800366c:	2302      	movs	r3, #2
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003672:	e07e      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003674:	2304      	movs	r3, #4
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e07a      	b.n	8003772 <UART_SetConfig+0x2e6>
 800367c:	2308      	movs	r3, #8
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e076      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003684:	2310      	movs	r3, #16
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e072      	b.n	8003772 <UART_SetConfig+0x2e6>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a35      	ldr	r2, [pc, #212]	; (8003768 <UART_SetConfig+0x2dc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12a      	bne.n	80036ec <UART_SetConfig+0x260>
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <UART_SetConfig+0x2cc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a4:	d01a      	beq.n	80036dc <UART_SetConfig+0x250>
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036aa:	d81b      	bhi.n	80036e4 <UART_SetConfig+0x258>
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d00c      	beq.n	80036cc <UART_SetConfig+0x240>
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b6:	d815      	bhi.n	80036e4 <UART_SetConfig+0x258>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x238>
 80036bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c0:	d008      	beq.n	80036d4 <UART_SetConfig+0x248>
 80036c2:	e00f      	b.n	80036e4 <UART_SetConfig+0x258>
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e052      	b.n	8003772 <UART_SetConfig+0x2e6>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e04e      	b.n	8003772 <UART_SetConfig+0x2e6>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e04a      	b.n	8003772 <UART_SetConfig+0x2e6>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e046      	b.n	8003772 <UART_SetConfig+0x2e6>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e042      	b.n	8003772 <UART_SetConfig+0x2e6>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <UART_SetConfig+0x2c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d13a      	bne.n	800376c <UART_SetConfig+0x2e0>
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <UART_SetConfig+0x2cc>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003704:	d01a      	beq.n	800373c <UART_SetConfig+0x2b0>
 8003706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800370a:	d81b      	bhi.n	8003744 <UART_SetConfig+0x2b8>
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003710:	d00c      	beq.n	800372c <UART_SetConfig+0x2a0>
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d815      	bhi.n	8003744 <UART_SetConfig+0x2b8>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x298>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d008      	beq.n	8003734 <UART_SetConfig+0x2a8>
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x2b8>
 8003724:	2300      	movs	r3, #0
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e022      	b.n	8003772 <UART_SetConfig+0x2e6>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e01e      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e01a      	b.n	8003772 <UART_SetConfig+0x2e6>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e016      	b.n	8003772 <UART_SetConfig+0x2e6>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e012      	b.n	8003772 <UART_SetConfig+0x2e6>
 800374c:	efff69f3 	.word	0xefff69f3
 8003750:	40008000 	.word	0x40008000
 8003754:	40013800 	.word	0x40013800
 8003758:	40021000 	.word	0x40021000
 800375c:	40004400 	.word	0x40004400
 8003760:	40004800 	.word	0x40004800
 8003764:	40004c00 	.word	0x40004c00
 8003768:	40005000 	.word	0x40005000
 800376c:	2310      	movs	r3, #16
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a9f      	ldr	r2, [pc, #636]	; (80039f4 <UART_SetConfig+0x568>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d17a      	bne.n	8003872 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800377c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003780:	2b08      	cmp	r3, #8
 8003782:	d824      	bhi.n	80037ce <UART_SetConfig+0x342>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x300>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037cf 	.word	0x080037cf
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037bf 	.word	0x080037bf
 80037a0:	080037cf 	.word	0x080037cf
 80037a4:	080037cf 	.word	0x080037cf
 80037a8:	080037cf 	.word	0x080037cf
 80037ac:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7fe fc40 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 80037b4:	61f8      	str	r0, [r7, #28]
        break;
 80037b6:	e010      	b.n	80037da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b8f      	ldr	r3, [pc, #572]	; (80039f8 <UART_SetConfig+0x56c>)
 80037ba:	61fb      	str	r3, [r7, #28]
        break;
 80037bc:	e00d      	b.n	80037da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7fe fba1 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 80037c2:	61f8      	str	r0, [r7, #28]
        break;
 80037c4:	e009      	b.n	80037da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ca:	61fb      	str	r3, [r7, #28]
        break;
 80037cc:	e005      	b.n	80037da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80fb 	beq.w	80039d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d305      	bcc.n	80037fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d903      	bls.n	8003806 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003804:	e0e8      	b.n	80039d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2200      	movs	r2, #0
 800380a:	461c      	mov	r4, r3
 800380c:	4615      	mov	r5, r2
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	022b      	lsls	r3, r5, #8
 8003818:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800381c:	0222      	lsls	r2, r4, #8
 800381e:	68f9      	ldr	r1, [r7, #12]
 8003820:	6849      	ldr	r1, [r1, #4]
 8003822:	0849      	lsrs	r1, r1, #1
 8003824:	2000      	movs	r0, #0
 8003826:	4688      	mov	r8, r1
 8003828:	4681      	mov	r9, r0
 800382a:	eb12 0a08 	adds.w	sl, r2, r8
 800382e:	eb43 0b09 	adc.w	fp, r3, r9
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003840:	4650      	mov	r0, sl
 8003842:	4659      	mov	r1, fp
 8003844:	f7fc fcc0 	bl	80001c8 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003856:	d308      	bcc.n	800386a <UART_SetConfig+0x3de>
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d204      	bcs.n	800386a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	e0b6      	b.n	80039d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003870:	e0b2      	b.n	80039d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d15e      	bne.n	800393a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800387c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x44a>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x400>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fbc0 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61f8      	str	r0, [r7, #28]
        break;
 80038b6:	e014      	b.n	80038e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fbd2 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e010      	b.n	80038e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <UART_SetConfig+0x56c>)
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e00d      	b.n	80038e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fb1d 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 80038ca:	61f8      	str	r0, [r7, #28]
        break;
 80038cc:	e009      	b.n	80038e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61fb      	str	r3, [r7, #28]
        break;
 80038d4:	e005      	b.n	80038e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d077      	beq.n	80039d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005a      	lsls	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d916      	bls.n	8003932 <UART_SetConfig+0x4a6>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390a:	d212      	bcs.n	8003932 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	b29a      	uxth	r2, r3
 8003922:	8afb      	ldrh	r3, [r7, #22]
 8003924:	4313      	orrs	r3, r2
 8003926:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	8afa      	ldrh	r2, [r7, #22]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e052      	b.n	80039d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003938:	e04e      	b.n	80039d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800393e:	2b08      	cmp	r3, #8
 8003940:	d827      	bhi.n	8003992 <UART_SetConfig+0x506>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x4bc>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe fb62 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fb74 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8003978:	61f8      	str	r0, [r7, #28]
        break;
 800397a:	e010      	b.n	800399e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <UART_SetConfig+0x56c>)
 800397e:	61fb      	str	r3, [r7, #28]
        break;
 8003980:	e00d      	b.n	800399e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe fabf 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8003986:	61f8      	str	r0, [r7, #28]
        break;
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	61fb      	str	r3, [r7, #28]
        break;
 8003990:	e005      	b.n	800399e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800399c:	bf00      	nop
    }

    if (pclk != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d019      	beq.n	80039d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085a      	lsrs	r2, r3, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	441a      	add	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d909      	bls.n	80039d2 <UART_SetConfig+0x546>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d205      	bcs.n	80039d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e002      	b.n	80039d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3728      	adds	r7, #40	; 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	40008000 	.word	0x40008000
 80039f8:	00f42400 	.word	0x00f42400

080039fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01a      	beq.n	8003b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afa:	d10a      	bne.n	8003b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b098      	sub	sp, #96	; 0x60
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b50:	f7fd f9a0 	bl	8000e94 <HAL_GetTick>
 8003b54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d12e      	bne.n	8003bc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f88c 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d021      	beq.n	8003bc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e6      	bne.n	8003b7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e062      	b.n	8003c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d149      	bne.n	8003c64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f856 	bl	8003c90 <UART_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03c      	beq.n	8003c64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e6      	bne.n	8003bea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3308      	adds	r3, #8
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3308      	adds	r3, #8
 8003c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e011      	b.n	8003c88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3758      	adds	r7, #88	; 0x58
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca0:	e049      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d045      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fd f8f3 	bl	8000e94 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e048      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d031      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d110      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f838 	bl	8003d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e029      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d111      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f81e 	bl	8003d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e00f      	b.n	8003d56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d0a6      	beq.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b095      	sub	sp, #84	; 0x54
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d84:	643b      	str	r3, [r7, #64]	; 0x40
 8003d86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d118      	bne.n	8003e06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0310 	bic.w	r3, r3, #16
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e6      	bne.n	8003dd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e1a:	bf00      	nop
 8003e1c:	3754      	adds	r7, #84	; 0x54
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <memset>:
 8003e26:	4402      	add	r2, r0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d100      	bne.n	8003e30 <memset+0xa>
 8003e2e:	4770      	bx	lr
 8003e30:	f803 1b01 	strb.w	r1, [r3], #1
 8003e34:	e7f9      	b.n	8003e2a <memset+0x4>
	...

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	4d0d      	ldr	r5, [pc, #52]	; (8003e70 <__libc_init_array+0x38>)
 8003e3c:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	2600      	movs	r6, #0
 8003e44:	42a6      	cmp	r6, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	4d0b      	ldr	r5, [pc, #44]	; (8003e78 <__libc_init_array+0x40>)
 8003e4a:	4c0c      	ldr	r4, [pc, #48]	; (8003e7c <__libc_init_array+0x44>)
 8003e4c:	f000 f818 	bl	8003e80 <_init>
 8003e50:	1b64      	subs	r4, r4, r5
 8003e52:	10a4      	asrs	r4, r4, #2
 8003e54:	2600      	movs	r6, #0
 8003e56:	42a6      	cmp	r6, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e60:	4798      	blx	r3
 8003e62:	3601      	adds	r6, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6a:	4798      	blx	r3
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08003ee8 	.word	0x08003ee8
 8003e74:	08003ee8 	.word	0x08003ee8
 8003e78:	08003ee8 	.word	0x08003ee8
 8003e7c:	08003eec 	.word	0x08003eec

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
